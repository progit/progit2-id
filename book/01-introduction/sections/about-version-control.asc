=== Tentang Version Control

(((version control)))
Apakah "version control", dan mengapa Anda sebaiknya peduli?
Version control adalah sebuah sistem yang merekam perubahan-perubahan kepada sebuah berkas atau sekumpulan berkas setiap waktu sehingga Anda dapat menilik kembali versi khusus suatu saat nanti.
Sebagai contoh, pada buku ini Anda akan menggunakan sumber kode perangkat lunak sebagai berkas-berkas yang sedang dikenai _version control_, walau pada kenyataannya Anda dapat melakukan ini dengan hampir semua jenis berkas pada komputer.

Jika Anda adalah seorang perancang grafis atau web dan ingin menyimpan setiap versi dari sebuah citra atau _layout_ (yang tentunya Anda ingin melakukannya), sebuah Version Control System (VCS) adalah sebuah hal yang bijak untuk digunakan.
Itu membolehkan Anda untuk mengembalikan berkas-berkas kepada keadaan sebelumnya, mengembalikan seluruh proyek kembali ke keadaan sebelumnya, membandingkan perubahan-perubahan di setiap waktu, melihat siapa yang terakhir mengubah suatu hal yang mungkin menimbulkan masalah, siapa dan kapan yang mengenalkan sebuah isu dan banyak lagi.
Menggunakan VCS secara umum juga berarti bahwa jika Anda melakukan kesalahan atau menghilangkan berkas, Anda dapat dengan mudah memulihkannya.
Sebagai tambahan, Anda mendapatkan semua ini dengan biaya yang sangat sedikit.

==== Sistem Version Control Lokal

(((version control,local)))
Banyak metode _version control_ yang dipilih oleh orang-orang adalah dengan menyalin berkas-berkas ke _directory_ lain (mungkin _directory_ yang diberi catatan waktu, jika mereka cerdas).
Pendekatan ini sangat umum karena ini sangat sederhana, namun ini juga sangat rentan terkena galat.
Mudah sekali untuk melupakan _directory_ mana Anda sedang berada dan menulis ke berkas yang salah atau menyalin setiap berkas yang bukan Anda maksud secara tidak sengaja

Untuk menghadapi hal ini, dahulu para _programmer_ mengembangkan VCS lokal yang memiliki _database_ sederhana yang menyimpan semua perubahan pada berkas pada _revision control_.

.Local version control.
image::images/local.png[Diagram version control lokal]

Salah satu alat VCS yang lebih terkenal adalah sistem yang disebut dengan RCS, yang masih disebarkan dengan banyak komputer saat ini.
Bahkan sistem operasi Mac OS X yang terkenal menyertakan perintah `rcs` ketika Anda memasang Developer Tools.
RCS bekerja dengan cara menyimpan sekumpulan _patch_ (itulah, perbedaan antara berkas-berkas) dalam sebuah format dalam diska; itu kemudian dapat membuat ulang sebarang berkas yang terlihat sama pada satu waktu dengan menambahkan semua _patch_.

==== Sistem Version Control Terpusat

(((version control,centralized)))
Masalah besar selanjutnya yang dihadapi orang-orang adalah bahwa mereka butuh bekerja bersama dengan para pengembang pada sistem lain.
Untuk menangani masalah ini, Centralized Version Control System (CVCSs) dikembangkan.
Sistem-sistem ini, seperti CVS, Subversion, dan Perforce, memiliki sebuah _server_ tunggal yang berisi semua berkas-berkas yang telah diberi versi, dan beberaka klien yang melakukan _check out_ pada berkas-berkas dari pusat tersebut.
Selama bertahun-tahun, hal ini telah menjadi standar untuk _version control_.

.Centralized version control.
image::images/centralized.png[Diagram version control terpusat]

Pengaturan ini menawarkan banyak keuntungan, terutama daripada VCS lokal.
Contohnya, setiap orang tahu hingga sekian derajat apa yang orang lain di dalam proyek sedang kerjakan.
Para administrator memiliki kendali yang baik tentang siapa dapat melakukan apa; dan itu jauh lebih mudah untuk mengelola sebuah CVCS daripada menangani _database_ lokal pada setiap klien.

Akan tetapi, pengaturan ini juga memiliki kekurangan-kekurangan.
Yang paling jelas adalah satu titik kegagalan yang diwakili oleh _server_ terpusat.
Jika _server_ tersebut sedang _down_ selama satu jam, maka selama itu tidak ada orang yang dapat bekerja bersama atau menyimpan perubahan yang telah diberi versi kepada apapun yang sedang mereka kerjakan.
Jika _hard disk_ dari _database_ pusat menjadi _corrupted_, dan cadangan yang memadai belum tersimpan, Anda akan kehilangan segalanya - seluruh riwayat dari proyek kecuali setiap _snapshot_ yang dimiliki oleh orang-orang pada mesin lokal mereka.
Sistem VCS lokal menderita dari hal yang sama pula - ketika Anda memiliki semua riwayat dari proyek pada satu tempat, Anda memiliki resiko untuk kehilangan semuanya.

==== Sistem Version Control Tersebar

(((version control,distributed)))
Inilah di mana Distributed Version Control Systems (DVCSs) masuk.
Pada DVCS (seperti Git, Mercurial, Bazaar atau Darcs), para klien tidak hanya melakukan _check out_ pada _snapshot_ terakhir dari berkas: mereka mencerminkan sepenuhnya _repository_ tersebut.
Juga jika sebarang _server_ mati, dan sistem-sistem ini bekerja bersama melalui itu, setiap _repository_ milik klien dapat disalin kembali ke _server_ untuk memulihkannya.
Setiap _check out_ benar-benar cadangan penuh dari semua data.

.Distributed version control.
image::images/distributed.png[Sistem version control tersebar]

Selebihnya, banyak dari sistem ini bekerja dengan baik dengan memiliki beberapa _remote repository_ yang mana mereka dapat bekerja dengan itu, sehingga Anda dapat bekerja bersama dengan beberapa kelompok orang yang berbeda dengan cara yang berbeda secara bersamaan dalam proyek yang sama.
Ini membolehkan Anda untuk mengatur beberapa jenis alur kerja yang tidak mungkin dilakukan pada sistem terpusat, seperti model hirarkial.
