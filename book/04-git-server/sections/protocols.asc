=== Protokol

Git dapat menggunakan empat protokol utama untuk mentransfer data: Lokal, HTTP, _Secure Shell_(SSH) dan Git.
Di sini kita akan membahas apa saja itu dan dalam keadaan dasar seperti apa Anda ingin (atau tidak ingin) menggunakannya.

==== Protokol Lokal

(((protocols, local)))
Hal yang paling mendasar adalah _Protokol lokal_, di mana repositori _remote_ berada dalam direktori lain pada _disk_.
Ini sering digunakan jika semua orang dalam tim Anda memiliki akses bersama terhadap filesistem seperti _mount_ NFS, atau pada kasus yang sering terjadi setiap orang masuk ke komputer yang sama.
Tidak masalah siapa yang terakhir, karena semua contoh kode repositori Anda akan tetap berada pada komputer yang sama, yang lebih mungkin terjadi adalah kerugian dan kehilangan data.

Jika Anda memiliki filesistem yang terpasang bersama, Anda dapat melakukan kloning, _push_, _pull_ dari dan ke repositori lokal yang berbasis berkas.
Untuk melakukan kloning sebuah repositori seperti ini atau menambahkannya sebagai _remote_ kedalam proyek yang sudah ada, gunakan jalur ke repositori sebagai URL.
Sebagai contoh, untuk mengkloning sebuah repositori lokal, Anda dapat melakukannya dengan cara seperti ini:

[source,console]
----
$ git clone /opt/git/project.git
----

Atau dapat dilakukan dengan cara:

[source,console]
----
$ git clone file:///opt/git/project.git
----

Git bekerja dengan cara yang sedikit berbeda jika Anda menentukan `file://` di awal URL secara eksplisit.
Jika Anda hanya menentukan jalurnya, Git akan mencoba menggunakan _hardlink_ atau menyalin berkas-berkas yang diperlukan secara langsung.
Jika Anda menentukan `file://`, Git akan mengaktifkan proses-proses yang biasanya digunakan untuk memindahkan data melalui jaringan yang umumnya merupakan metode yang kurang efisien dalam memindahkan data.
Alasan utama untuk menentukan awalan `file://` adalah jika Anda menginginkan sebuah salinan repositori yang bersih dengan meninggalkan referensi dan objek asing - biasanya setelah diimpor dari sistem kontrol versi lain atau yang serupa dengannya (lihat <<_git_internals>> untuk tugas-tugas perawatan).
Kita akan menggunakan jalur normal di sini karena hal ini akan menjadikannya lebih cepat.

Untuk menambahkan repositori lokal kedalam proyek Git yang sudah ada, Anda dapat menjalankan perintah seperti ini:

[source,console]
----
$ git remote add local_proj /opt/git/project.git
----

Lalu, Anda dapat melakukan _push_ dan _pull_ dari dan ke repositori _remote_ seperti Anda melakukannya melalui jaringan.

===== Pro

Repositori berbasis _file_ ini didukung karena terlihat lebih sedarhana dan menggunakan hak akses berkas dan akses jaringan yang ada.
Jika Anda sudah memiliki sebuah sistem file bersama di mana seluruh tim Anda memiliki akses, mudah sekali membuat sebuah repositori.
Simpan salinan repositori kosong di suatu tempat yang dapat diakses secara bersama dan atur hak akses baca/tulis seperti yang Anda inginkan untuk direktori bersama lainya.
Kita akan membahas bagaimana mengekspor salinan repositori kosong untuk tujuan ini pada <<_git_on_the_server>>.

Ini juga merupakan pilihan yang bagus untuk mengambil pekerjaan dari repositori kerja orang lain dengan cepat. Jika Anda dan rekan kerja sedang mengerjakan proyek yang sama dan mereka ingin Anda memeriksa sesuatu, menjalankan perintah seperti `git pull /home/john/project` seringkali lebih mudah dari pada harus melakukan _pushing_  ke _server remote_ dan mengharuskan Anda untuk melakukan _pulling_ ke komputer lokal.

===== Kontra

Yang menjadi kontra dari metode ini bahwa akses bersama pada umumnya lebih sulit pada pengaturan dan untuk akses dari berbagai lokasi daripada akses jaringan dasar.
Jika Anda ingin melakukan _push_ dari laptop saat berada di rumah, Anda harus melakukan _mounting_ disk remote, yang bisa lebih sulit dan lambat jika dibandingkan dengan akses berbasis jaringan.

Penting juga untuk menyebutkan bahwa ini bukan merupakan pilihan tercepat jika Anda menggunakan _mount_ bersama.
Repositori lokal cepat hanya jika Anda memiliki akses yang cepat terhadap data.
Sebuah repositori pada NFS seringkali lebih lambat jika dibandingkan dengan repositori yang diakses melalui SSH pada _server_ yang sama, yang memungkinkan Git untuk menjalankan disk lokal pada setiap sistem.

==== Protokol HTTP

Git dapat berkomunikasi melalui HTTP dalam dua _mode_ yang berbeda.
Sebelum Git 1.6.6 hanya ada satu cara yang bisa dilakukan untuk melakukan hal ini dengan cara yang sangat sederhanad dan umumnya hanya bisa dibaca.
Pada versi 1.6.6 sebuah protokol baru yang lebih cerdas diperkenalkan yang melibatkan kemampuan cerdas Git dalam melakukan transfer data dengan cara yang serupa ketika dilakukan melalui SSH.
Dalam beberapa tahun terakhir, protokol HTTP baru ini menjadi sangat terkenal karena lebih mudah bagi pengguna dan lebih pintar dalam cara berkomunikasi.
Versi yang lebih baru sering disebut sebagai protokol ``Smart'' HTTP dan yang lama disebut sebagai protokol ``Dumb'' HTTP.
Kami akan membahas protokol ``Smart'' HTTP terlebih dahulu.

===== Smart HTTP

(((protocols, smart HTTP)))
The ``smart'' HTTP protocol operates very similarly to the SSH or Git protocols but runs over standard HTTP/S ports and can use various HTTP authentication mechanisms, meaning it's often easier on the user than something like SSH, since you can use things like username/password basic authentication rather than having to set up SSH keys.

It has probably become the most popular way to use Git now, since it can be set up to both serve anonymously like the `git://` protocol, and can also be pushed over with authentication and encryption like the SSH protocol. Instead of having to set up different URLs for these things, you can now use a single URL for both. If you try to push and the repository requires authentication (which it normally should), the server can prompt for a username and password. The same goes for read access.

In fact, for services like GitHub, the URL you use to view the repository online (for example, ``https://github.com/schacon/simplegit[]'') is the same URL you can use to clone and, if you have access, push over.

===== Dumb HTTP

(((protocols, dumb HTTP)))
If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler ``dumb'' HTTP protocol.
The Dumb protocol expects the bare Git repository to be served like normal files from the web server.
The beauty of the Dumb HTTP protocol is the simplicity of setting it up.
Basically, all you have to do is put a bare Git repository under your HTTP document root and set up a specific `post-update` hook, and you're done (See <<_git_hooks>>).
At that point, anyone who can access the web server under which you put the repository can also clone your repository.
To allow read access to your repository over HTTP, do something like this:

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

That's all.(((hooks, post-update)))
The `post-update` hook that comes with Git by default runs the appropriate command (`git update-server-info`) to make HTTP fetching and cloning work properly.
This command is run when you push to this repository (over SSH perhaps); then, other people can clone via something like

[source,console]
----
$ git clone https://example.com/gitproject.git
----

In this particular case, we're using the `/var/www/htdocs` path that is common for Apache setups, but you can use any static web server – just put the bare repository in its path.
The Git data is served as basic static files (see <<_git_internals>> for details about exactly how it's served).

Generally you would either choose to run a read/write Smart HTTP server or simply have the files accessible as read-only in the Dumb manner. It's rare to run a mix of the two services.

===== The Pros

We'll concentrate on the pros of the Smart version of the HTTP protocol.

The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
Being able to authenticate with a username and password is also a big advantage over SSH, since users don't have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
It is also a very fast and efficient protocol, similar to the SSH one.

You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.

Another nice thing is that HTTP/S are such commonly used protocols that corporate firewalls are often set up to allow traffic through these ports.

===== The Cons

Git over HTTP/S can be a little more tricky to set up compared to SSH on some servers.
Other than that, there is very little advantage that other protocols have over the ``Smart'' HTTP protocol for serving Git.

If you're using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH. There are however several credential caching tools you can use, including Keychain access on OSX and Credential Manager on Windows, to make this pretty painless. Read <<_credential_caching>> to see how to set up secure HTTP password caching on your system.

==== The SSH Protocol

(((protocols, SSH)))
A common transport protocol for Git when self-hosting is over SSH.
This is because SSH access to servers is already set up in most places – and if it isn't, it's easy to do.
SSH is also an authenticated network protocol; and because it's ubiquitous, it's generally easy to set up and use.

To clone a Git repository over SSH, you can specify ssh:// URL like this:

[source,console]
----
$ git clone ssh://user@server/project.git
----

Or you can use the shorter scp-like syntax for the SSH protocol:

[source,console]
----
$ git clone user@server:project.git
----

You can also not specify a user, and Git assumes the user you're currently logged in as.

===== The Pros

The pros of using SSH are many.
First, SSH is relatively easy to set up – SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure – all data transfer is encrypted and authenticated.
Last, like the HTTP/S, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.

===== The Cons

The negative aspect of SSH is that you can't serve anonymous access of your repository over it.
People must have access to your machine over SSH to access it, even in a read-only capacity, which doesn't make SSH access conducive to open source projects.
If you're using it only within your corporate network, SSH may be the only protocol you need to deal with.
If you want to allow anonymous read-only access to your projects and also want to use SSH, you’ll have to set up SSH for you to push over but something else for others to fetch over.

==== The Git Protocol

(((protocols, git)))
Next is the Git protocol.
This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.
In order for a repository to be served over the Git protocol, you must create the `git-daemon-export-ok` file – the daemon won't serve a repository without that file in it – but other than that there is no security.
Either the Git repository is available for everyone to clone or it isn't.
This means that there is generally no pushing over this protocol.
You can enable push access; but given the lack of authentication, if you turn on push access, anyone on the internet who finds your project's URL could push to your project.
Suffice it to say that this is rare.

===== The Pros

The Git protocol is often the fastest network transfer protocol available.
If you’re serving a lot of traffic for a public project or serving a very large project that doesn't require user authentication for read access, it’s likely that you'll want to set up a Git daemon to serve your project.
It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.

===== The Cons

The downside of the Git protocol is the lack of authentication.
It's generally undesirable for the Git protocol to be the only access to your project.
Generally, you'll pair it with SSH or HTTPS access for the few developers who have push (write) access and have everyone else use `git://` for read-only access.
It's also probably the most difficult protocol to set up.
It must run its own daemon, which requires `xinetd` configuration or the like, which isn't always a walk in the park.
It also requires firewall access to port 9418, which isn't a standard port that corporate firewalls always allow.
Behind big corporate firewalls, this obscure port is commonly blocked.
