=== Berkontribusi pada sebuah Proyek

Setelah akun kami disiapkan, mari kita membahas beberapa detail yang bisa berguna untuk membantu Anda berkontribusi pada proyek yang ada.

==== Proyek Forking

(((forking)))
Jika Anda ingin berkontribusi pada proyek yang ada dimana Anda tidak memiliki akses push, Anda dapat ``fork'' proyek.
Apa artinya ini berarti GitHub akan membuat salinan proyek yang sepenuhnya milik Anda; itu tinggal di namespace pengguna Anda, dan Anda dapat mendorongnya.

[NOTE]
====
Secara historis, istilah ``fork'' agak negatif dalam konteks, yang berarti seseorang mengambil proyek open source ke arah yang berbeda, terkadang menciptakan proyek yang bersaing dan membelah kontributor.
Di GitHub, sebuah ``fork'' hanyalah proyek yang sama di ruang nama Anda sendiri, memungkinkan Anda membuat perubahan pada proyek secara publik sebagai cara untuk berkontribusi secara lebih terbuka.

====

Dengan cara ini, proyek tidak perlu khawatir menambahkan pengguna sebagai kolaborator untuk memberi mereka akses push.
Orang dapat meminta sebuah proyek, mendorongnya, dan menyumbangkan perubahan mereka kembali ke repositori aslinya dengan membuat apa yang disebut Permintaan Tarik, yang akan kita bahas selanjutnya.
Ini membuka thread diskusi dengan ulasan kode, dan pemilik dan kontributornya kemudian dapat mengkomunikasikan perubahan tersebut sampai pemiliknya senang dengannya, dan pada saat mana pemiliknya dapat menggabungkannya.

Untuk mencari proyek, kunjungi halaman proyek dan klik tombol ``Fork '' di kanan atas halaman.

.Tombol ``fork''.
image::images/forkbutton.png[The ``Fork'' button.]

Setelah beberapa detik, Anda akan dibawa ke halaman proyek baru Anda, dengan salinan kode Anda sendiri yang dapat ditulisi.


[[_github_flow]]
==== Aliran GitHub

(((GitHub, Flow)))
GitHub dirancang di sekitar alur kerja kolaborasi tertentu, berpusat pada Pull Requests.
Aliran ini bekerja baik Anda berkolaborasi dengan tim yang erat dalam satu gudang bersama, atau perusahaan terdistribusi global atau jaringan orang asing yang berkontribusi pada sebuah proyek melalui puluhan garpu.
Ini berpusat pada alur kerja <<_topic_branch>> yang tercakup dalam <<_git_branching>>.

Begini cara kerjan umumnya:

1. Buat cabang topik dari `master`.
2. Buat beberapa komitmen untuk memperbaiki proyek.
3. Dorong cabang ini ke proyek GitHub Anda.
4. Buka Permintaan Tarik pada GitHub.
5. Diskusikan, dan secara opsional terus melakukan.
6. Pemilik proyek menggabungkan atau menutup Pull Request.

Ini pada dasarnya adalah alur kerja Manajer Integrasi yang tercakup dalam <<_integration_manager>>, namun alih-alih menggunakan email untuk mengkomunikasikan dan meninjau perubahan, tim menggunakan alat berbasis web GitHub.

Mari kita berjalan melalui sebuah contoh untuk mengusulkan sebuah perubahan pada proyek open source yang di-host di GitHub menggunakan arus ini.

===== Membuat Permintaan Tarik

Tony mencari kode untuk dijalankan di mikrokontroler Arduino yang dapat diprogramnya dan telah menemukan file program hebat di GitHub di https://github.com/schacon/blink[].

Proyek yang ingin kami sampaikan.
image::images/blink-01-start.png[The project we want to contribute to.]

Satu-satunya masalah adalah tingkat berkedip terlalu cepat, kami pikir akan jauh lebih baik menunggu 3 detik daripada 1 di antara setiap perubahan status. Jadi mari kita memperbaiki program dan menyerahkannya kembali ke proyek sebagai usulan perubahan.

Pertama, kita klik tombol 'Fork' seperti yang disebutkan sebelumnya untuk mendapatkan salinan proyek kita sendiri. Nama pengguna kami di sini adalah ``tonychacon'' jadi salinan proyek ini ada di `https://github.com/tonychacon/blink` dan di sanalah kami bisa mengeditnya. Kami akan mengkloningnya secara lokal, membuat cabang topik, membuat kode berubah dan akhirnya mendorong perubahan itu kembali ke GitHub.

[source,shell]
----
$ git clone https://github.com/tonychacon/blink <1>
Cloning into 'blink'...

$ cd blink
$ git checkout -b slow-blink <2>
Switched to a new branch 'slow-blink'

$ sed -i '' 's/1000/3000/' blink.ino <3>

$ git diff --word-diff <4>
diff --git a/blink.ino b/blink.ino
index 15b9911..a6cc5a5 100644
--- a/blink.ino
+++ b/blink.ino
@@ -18,7 +18,7 @@ void setup() {
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
}

$ git commit -a -m 'three seconds is better' <5>
[master 5ca509d] three seconds is better
 1 file changed, 2 insertions(+), 2 deletions(-)

$ git push origin slow-blink <6>
Username for 'https://github.com': tonychacon
Password for 'https://tonychacon@github.com':
Counting objects: 5, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 340 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/tonychacon/blink
 * [new branch]      slow-blink -> slow-blink
----

<1> Clone garpu proyek kita secara lokal
<2> Buat cabang topik deskriptif
<3> Buat perubahan kami ke kode
<4> Periksa apakah perubahan itu bagus
<5> Komit perubahan kami ke cabang topik
<6> Dorong cabang topik baru kami kembali ke garpu GitHub kami

Sekarang jika kita kembali ke garpu di GitHub, kita dapat melihat bahwa GitHub melihat bahwa kita mendorong sebuah cabang topik baru dan memberi kita tombol hijau besar untuk melihat perubahan kita dan membuka Permintaan Tarik ke proyek aslinya.

Anda bisa masuk ke halaman ``Branches'' di `https://github.com/<user>/<project>/branches` untuk menemukan cabang Anda dan buka Request Pull baru dari sana.

.Tombol Pull Request
image::images/blink-02-pr.png[Pull Request button]

(((GitHub, pull requests)))
Jika kita klik tombol hijau itu, kita akan melihat layar yang memungkinkan kita membuat judul dan deskripsi untuk perubahan yang ingin kita minta sehingga pemilik proyek memiliki alasan bagus untuk mempertimbangkannya. Secara umum, ada baiknya Anda meluangkan beberapa upaya untuk membuat deskripsi ini seefisien mungkin sehingga penulis tahu mengapa hal ini diajukan dan mengapa ini akan menjadi perubahan yang berharga bagi mereka untuk diterima.

Kami juga melihat daftar komit di cabang topik kami yang berada di depan cabang `master` (dalam kasus ini, hanya satu) dan perbedaan terpadu dari semua perubahan yang akan dilakukan seandainya cabang ini mendapatkan digabung oleh pemilik proyek.

.Tarik permintaan pembuatan halaman
image::images/blink-03-pull-request-open.png[Pull Request creation]

Saat menekan tombol 'Create pull request' di layar ini, pemilik proyek yang Anda cari mendapat pemberitahuan bahwa seseorang menyarankan adanya perubahan dan akan menautkan ke halaman yang memiliki semua informasi ini di dalamnya.

[CATATAN]
====
Meskipun Permintaan Tarik sering digunakan untuk proyek publik seperti ini ketika kontributor memiliki perubahan yang lengkap yang siap dibuat, namun seringkali digunakan dalam proyek internal - pada awal siklus pengembangan. Karena Anda dapat terus mendorong cabang topik bahkan *setelah* Permintaan Tarik dibuka, ini sering dibuka lebih awal dan digunakan sebagai cara untuk mengulangi pekerjaan sebagai tim dalam konteks, daripada dibuka pada akhir proses.
====

===== Iterasi pada Permintaan Tarik

Pada titik ini, pemilik proyek dapat melihat perubahan yang disarankan dan menggabungkannya, menolaknya atau mengomentarinya. Anggap saja dia menyukai idenya, tapi lebih memilih waktu yang sedikit lebih lama agar lampu tidak menyala dari pada di atas.

Dimana percakapan ini bisa terjadi melalui email di alur kerja yang disajikan di <<_distributed_git>>, di GitHub ini terjadi secara online. Pemilik proyek dapat meninjau perbedaan terpadu dan memberikan komentar dengan mengklik salah satu baris.

.Komentar pada baris kode tertentu dalam Permintaan Tarik
image::images/blink-04-pr-comment.png[PR line comment]

Begitu pengelola membuat komentar ini, orang yang membuka Permintaan Tarik (dan memang orang lain yang menonton repositori) akan mendapatkan notifikasi. Kita akan membahasnya nanti, tapi jika ada notifikasi email yang dinyalakan, Tony akan mendapatkan email seperti ini:

[[_pemberitahuan_email]]
.Komentar dikirim sebagai pemberitahuan email
image::images/blink-04-email.png[Email notification]

Siapapun juga dapat meninggalkan komentar umum pada Permintaan Tarik. Dalam <<_pr_discussion>> kita bisa melihat contoh dari pemilik proyek yang mengomentari sebuah baris kode dan kemudian meninggalkan komentar umum di bagian diskusi. Anda dapat melihat bahwa komentar kode dibawa ke dalam percakapan juga.

[[_pr_discussion]]
Halaman diskusi Permintaan Permintaan
image::images/blink-05-general-comment.png[PR discussion page]

Sekarang kontributor bisa melihat apa yang perlu mereka lakukan agar perubahannya bisa diterima. Beruntung ini juga hal yang sangat sederhana untuk dilakukan. Di mana melalui email Anda mungkin harus memutar ulang serial Anda dan mengirimkannya kembali ke milis, dengan GitHub Anda hanya berkomitmen untuk cabang topik lagi dan mendorong.

Jika kontributor melakukannya maka pemilik proyek akan diberitahu lagi dan saat mereka mengunjungi halaman mereka akan melihat bahwa itu telah ditangani. Sebenarnya, karena sederet kode berubah yang memiliki komentar di atasnya, GitHub memperhatikannya dan menghancurkan perbedaan yang sudah usang.

[[_pr_final]]
.Pull Request final
image::images/blink-06-final.png[PR final]

Hal yang menarik untuk diperhatikan adalah jika Anda mengklik tab ``Files Changed'' pada Permintaan Tarik ini, Anda akan mendapatkan diff ``unified' - yaitu perbedaan total agregat yang akan diperkenalkan ke cabang utama jika cabang topik ini digabungkan. Dalam istilah `git diff`, pada dasarnya secara otomatis Anda menunjukkan` git diff master...<branch>` untuk cabang Request Request ini berdasarkan. Lihat <<_ what_is_introduced>> untuk informasi lebih lanjut tentang jenis diff ini.

Hal lain yang Anda perhatikan adalah GitHub memeriksa apakah Permintaan Tarik menyatu dengan bersih dan menyediakan tombol untuk melakukan penggabungan untuk Anda di server. Tombol ini hanya muncul jika Anda memiliki akses tulis ke repositori dan penggabungan sepele mungkin dilakukan. Jika Anda mengkliknya, GitHub akan melakukan penggabungan ``non-fast-forward'' yang berarti bahwa meskipun penggabungan *bisa* menjadi fast-forward, tetap akan membuat commit gabungan.

If you would prefer, you can simply pull the branch down and merge it locally. If you merge this branch into the `master` branch and push it to GitHub, the Pull Request will automatically be closed.

This is the basic workflow that most GitHub projects use. Topic branches are created, Pull Requests are opened on them, a discussion ensues, possibly more work is done on the branch and eventually the request is either closed or merged.

[NOTE]
.Not Only Forks
====
It's important to note that you can also open a Pull Request between two branches in the same repository. If you're working on a feature with someone and you both have write access to the project, you can push a topic branch to the repository and open a Pull Request on it to the `master` branch of that same project to initiate the code review and discussion process. No forking neccesary.
====

==== Advanced Pull Requests

Now that we've covered the basics of contributing to a project on GitHub, let's cover a few interesting tips and tricks about Pull Requests so you can be more effective in using them.

===== Pull Requests as Patches

It's important to understand that many projects don't really think of Pull Requests as queues of perfect patches that should apply cleanly in order, as most mailing list-based projects think of patch series contributions. Most GitHub projects think about Pull Request branches as iterative conversations around a proposed change, culminating in a unified diff that is applied by merging.

This is an important distinction, because generally the change is suggested before the code is thought to be perfect, which is far more rare with mailing list based patch series contributions. This enables an earlier conversation with the maintainers so that arriving at the proper solution is more of a community effort. When code is proposed with a Pull Request and the maintainers or community suggest a change, the patch series is generally not re-rolled, but instead the difference is pushed as a new commit to the branch, moving the conversation forward with the context of the previous work intact.

For instance, if you go back and look again at <<_pr_final>>, you'll notice that the contributor did not rebase his commit and send another Pull Request. Instead they added new commits and pushed them to the existing branch. This way if you go back and look at this Pull Request in the future, you can easily find all of the context of why decisions were made. Pushing the ``Merge'' button on the site purposefully creates a merge commit that references the Pull Request so that it's easy to go back and research the original conversation if necessary.

===== Keeping up with Upstream

If your Pull Request becomes out of date or otherwise doesn't merge cleanly, you will want to fix it so the maintainer can easily merge it. GitHub will test this for you and let you know at the bottom of every Pull Request if the merge is trivial or not.

[[_pr_fail]]
.Pull Request does not merge cleanly
image::images/pr-01-fail.png[PR merge failure]

If you see something like <<_pr_fail>>, you'll want to fix your branch so that it turns green and the maintainer doesn't have to do extra work.

You have two main options in order to do this. You can either rebase your branch on top of whatever the target branch is (normally the `master` branch of the repository you forked), or you can merge the target branch into your branch.

Most developers on GitHub will choose to do the latter, for the same reasons we just went over in the previous section. What matters is the history and the final merge, so rebasing isn't getting you much other than a slightly cleaner history and in return is *far* more difficult and error prone.

If you want to merge in the target branch to make your Pull Request mergeable, you would add the original repository as a new remote, fetch from it, merge the main branch of that repository into your topic branch, fix any issues and finally push it back up to the same branch you opened the Pull Request on.

For example, let's say that in the ``tonychacon'' example we were using before, the original author made a change that would create a conflict in the Pull Request. Let's go through those steps.

[source,shell]
----
$ git remote add upstream https://github.com/schacon/blink <1>

$ git fetch upstream <2>
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
Unpacking objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
From https://github.com/schacon/blink
 * [new branch]      master     -> upstream/master

$ git merge upstream/master <3>
Auto-merging blink.ino
CONFLICT (content): Merge conflict in blink.ino
Automatic merge failed; fix conflicts and then commit the result.

$ vim blink.ino <4>
$ git add blink.ino
$ git commit
[slow-blink 3c8d735] Merge remote-tracking branch 'upstream/master' \
    into slower-blink

$ git push origin slow-blink <5>
Counting objects: 6, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 682 bytes | 0 bytes/s, done.
Total 6 (delta 2), reused 0 (delta 0)
To https://github.com/tonychacon/blink
   ef4725c..3c8d735  slower-blink -> slow-blink
----

<1> Add the original repository as a remote named ``upstream''
<2> Fetch the newest work from that remote
<3> Merge the main branch into your topic branch
<4> Fix the conflict that occured
<5> Push back up to the same topic branch

Once you do that, the Pull Request will be automatically updated and re-checked to see if it merges cleanly.

[[_pr_fail]]
.Pull Request now merges cleanly
image::images/pr-02-merge-fix.png[PR fixed]

One of the great things about Git is that you can do that continuously. If you have a very long-running project, you can easily merge from the target branch over and over again and only have to deal with conflicts that have arisen since the last time that you merged, making the process very manageable.

If you absolutely wish to rebase the branch to clean it up, you can certainly do so, but it is highly encouraged to not force push over the branch that the Pull Request is already opened on. If other people have pulled it down and done more work on it, you run into all of the issues outlined in <<_rebase_peril>>. Instead, push the rebased branch to a new branch on GitHub and open a brand new Pull Request referencing the old one, then close the original.

===== References

Your next question may be ``How to I reference the old Pull Request?''. It turns out there are many, many ways to reference other things almost anywhere you can write in GitHub.

Let's start with how to cross-reference another Pull Request or an Issue. All Pull Requests and Issues are assigned numbers and they are unique within the project. For example, you can't have Pull Request #3 _and_ Issue #3. If you want to reference any Pull Request or Issue from any other one, you can simply put `#<num>` in any comment or description. You can also be more specific if the Issue or Pull request lives somewhere else; write `username#<num>` if you're referring to an Issue or Pull Request in a fork of the repository you're in, or `username/repo#<num>` to reference something in another repository.

Let's look at an example. Say we rebased the branch in the previous example, created a new pull request for it, and now we want to reference the old pull request from the new one. We also want to reference an issue in the fork of the repository and an issue in a completely different project. We can fill out the description just like <<_pr_references>>.

[[_pr_references]]
.Cross references in a Pull Request.
image::images/mentions-01-syntax.png[PR references]

When we submit this pull request, we'll see all of that rendered like <<_pr_references_render>>.

[[_pr_references_render]]
.Cross references rendered in a Pull Request.
image::images/mentions-02-render.png[PR references rendered]

Notice that the full GitHub URL we put in there was shortened to just the information needed.

Now if Tony goes back and closes out the original Pull Request, we can see that by mentioning it in the new one, GitHub has automatically created a trackback event in the Pull Request timeline. This means that anyone who visits this Pull Request and sees that it is closed can easily link back to the one that superceded it. The link will look something like <<_pr_closed>>.

[[_pr_closed]]
.Cross references rendered in a Pull Request.
image::images/mentions-03-closed.png[PR closed]

In addition to issue numbers, you can also reference a specific commit by SHA. You have to specify a full 40 character SHA, but if GitHub sees that in a comment, it will link directly to the commit. Again, you can reference commits in forks or other repositories in the same way you did with issues.

==== Markdown

Linking to other Issues is just the beginning of interesting things you can do with almost any text box on GitHub. In  Issue and Pull Request descriptions, comments, code comments and more, you can use what is called ``GitHub Flavored Markdown''. Markdown is like writing in plain text but which is rendered richly.

See <<_example_markdown>> for an example of how comments or text can be written and then rendered using Markdown.

[[_example_markdown]]
.An example of Markdown as written and as rendered.
image::images/markdown-01-example.png[Example Markdown]

===== GitHub Flavored Markdown

The GitHub flavor of Markdown adds more things you can do beyond the basic Markdown syntax. These can all be really useful when creating useful Pull Request or Issue comments or descriptions.

====== Task Lists

The first really useful GitHub specific Markdown feature, especially for use in Pull Requests, is the Task List. A task list is a list of checkboxes of things you want to get done. Putting them into an Issue or Pull Request normally indicates things that you want to get done before you consider the item complete.

You can create a task list like this:

[source]
----
- [X] Write the code
- [ ] Write all the tests
- [ ] Document the code
----

If we include this in the description of our Pull Request or Issue, we'll see it rendered like <<_task_lists>>

[[_task_lists]]
.Task lists rendered in a Markdown comment.
image::images/markdown-02-tasks.png[Example Task List]

This is often used in Pull Requests to indicate what all you would like to get done on the branch before the Pull Request will be ready to merge. The really cool part is that you can simply click the checkboxes to update the comment -- you don't have to edit the Markdown directly to check tasks off.

What's more, GitHub will look for task lists in your Issues and Pull Requests and show them as metadata on the pages that list them out. For example, if you have a Pull Request with tasks and you look at the overview page of all Pull Requests, you can see how far done it is. This helps people break down Pull Requests into subtasks and helps other people track the progress of the branch. You can see an example of this in <<_task_list_progress>>.

[[_task_list_progress]]
.Task list summary in the Pull Request list.
image::images/markdown-03-task-summary.png[Example Task List]

These are incredibly useful when you open a Pull Request early and use it to track your progress through the implementation of the feature.

====== Code Snippets

You can also add code snippets to comments. This is especially useful if you want to present something that you _could_ try to do before actually implementing it as a commit on your branch. This is also often used to add example code of what is not working or what this Pull Request could implement.

To add a snippet of code you have to ``fence'' it in backticks.

[source]
----
```java
for(int i=0 ; i < 5 ; i++)
{
   System.out.println("i is : " + i);
}
```
----

If you add a language name like we did there with 'java', GitHub will also try to syntax highlight the snippet. In the case of the above example, it would end up rendering like <<_md_code>>.

[[_md_code]]
.Rendered fenced code example.
image::images/markdown-04-fenced-code.png[Rendered fenced code]

====== Quoting

If you're responding to a small part of a long comment, you can selectively quote out of the other comment by preceding the lines with the `>` character. In fact, this is so common and so useful that there is a keyboard shortcut for it. If you highlight text in a comment that you want to directly reply to and hit the `r` key, it will quote that text in the comment box for you.

The quotes look something like this:

[source]
----
> Whether 'tis Nobler in the mind to suffer
> The Slings and Arrows of outrageous Fortune,

How big are these slings and in particular, these arrows?
----

Once rendered, the comment will look like <<_md_quote>>.

[[_md_quote]]
.Rendered quoting example.
image::images/markdown-05-quote.png[Rendered quoting]

====== Emoji

Finally, you can also use emoji in your comments. This is actually used quite extensively in comments you see on many GitHub Issues and Pull Requests. There is even an emoji helper in GitHub. If you are typing a comment and you start with a `:` character, an autocompleter will help you find what you're looking for.

[[_md_emoji_auto]]
.Emoji autocompleter in action.
image::images/markdown-06-emoji-complete.png[Emoji autocompleter]

Emojis take the form of `:<name>:` anywhere in the comment. For instance, you could write something like this:

[source]
----
I :eyes: that :bug: and I :cold_sweat:.

:trophy: for :microscope: it.

:+1: and :sparkles: on this :ship:, it's :fire::poop:!

:clap::tada::panda_face:
----

When rendered, it would look something like <<_md_emoji>>.

[[_md_emoji]]
.Heavy emoji commenting.
image::images/markdown-07-emoji.png[Emoji]

Not that this is incredibly useful, but it does add an element of fun and emotion to a medium that is otherwise hard to convey emotion in.


[NOTE]
====
There are actually quite a number of web services that make use of emoji charaters these days. A great cheat sheet to reference to find emoji that expresses what you want to say can be found at:

http://www.emoji-cheat-sheet.com
====

====== Images

This isn't technically GitHub Flavored Markdown, but it is incredibly useful. In addition to adding Markdown image links to comments, which can be difficult to find and embed URLs for, GitHub allows you to drag and drop images into text areas to embed them.

[[_md_drag]]
.Drag and drop images to upload them and auto-embed them.
image::images/markdown-08-drag-drop.png[Drag and drop images]

If you look back at <<_pr_references>>, you can see a small ``Parsed as Markdown'' hint above the text area. Clicking on that will give you a full cheat sheet of everything you can do with Markdown on GitHub.
