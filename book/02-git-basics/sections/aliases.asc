[[_git_aliases]]
=== Git Aliases

(((aliases)))
Sebelum kita menyelesaikan bab ini tentang Git dasar, hanya ada satu tip kecil yang bisa membuat pengalaman Git Anda lebih sederhana, mudah, dan lebih familiar: alias.
Kami tidak akan merujuk pada mereka atau menganggap Anda telah menggunakannya di buku ini, tapi Anda mungkin harus tahu cara menggunakannya.

Git tidak secara otomatis menyimpulkan perintah Anda jika Anda mengetikkannya secara parsial.
Jika Anda tidak ingin mengetik seluruh teks dari masing-masing perintah Git, Anda dapat dengan mudah membuat sebuah alias untuk setiap perintah menggunakan `git config`.(((git commands, config)))
Berikut adalah beberapa contoh yang mungkin ingin Anda siapkan:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Ini berarti, misalnya, alih-alih mengetik `git commit`, Anda hanya perlu mengetikkan` git ci`.
Saat Anda terus menggunakan Git, Anda mungkin juga sering menggunakan perintah lain; jangan ragu untuk membuat alias baru.

Teknik ini juga bisa sangat berguna dalam membuat perintah yang menurut Anda harus ada.
Misalnya, untuk memperbaiki masalah kegunaan yang Anda hadapi dengan membuka sebuah file, Anda dapat menambahkan alias tidak aktif dari Anda ke Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Hal ini membuat dua perintah berikut setara:

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

Hal ini tampaknya sedikit lebih jelas.
Ini juga umum untuk menambahkan perintah `last`, seperti ini:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Dengan cara ini, Anda bisa melihat commit terakhir dengan mudah:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Seperti yang bisa Anda katakan, Git hanya mengganti perintah baru dengan apapun yang Anda inginkan.
Namun, mungkin Anda ingin menjalankan perintah eksternal, bukan subkomisi Git.
Dalam hal ini, Anda memulai perintah dengan karakter `!`.
Ini berguna jika Anda menulis alat Anda sendiri yang bekerja dengan gudang Git.
Kita bisa menunjukkan dengan aliasing `git visual` untuk menjalankan` gitk`:

[source,console]
----
$ git config --global alias.visual "!gitk"
----
