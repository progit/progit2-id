[[_remote_repos]]
=== Bekerja Secara terpisah

Untuk bisa berkolaborasi dalam projek apa saja di github, kamu harus tau bagaimana cara mengelola repositori terpisah (remote repository).

repositori terpisah adalah versi projek yang di hosting di internet ataupun di jaringan lainnya.

Kamu bisa mempunyai beberapa repositori terpisah, yang pada umumnya, setiap dari mereka hanya bisa dibaca dan ditulis oleh kamu.

Berkolaborasi dengan orang lain melibatkan mengelola repositori terpisah dan mem-push data dan mem-pull data, dari dan kepada mereka, ketika kamu butuh untuk membagi pekerjaanmu.

Mengelola repositori terpisah termasuk mengetahui bagaimana cara menambah repositori terpisah, menghapus repositori yang tidak lagi valid, mengelola berbagai cabang repositori dan mengetahui apakah cabang tersebut sedang digunakan (tracked) atau tidak, dan lainnya.

Di bagian ini, kita akan belajar beberapa dari skill mengelola repositori terpisah.

==== Menunjukkan repositori terpisahmu

Untuk melihat server mana yang kamu konfigurasikan, kamu bisa menjalankan perintah `git remote`.(((git commands, remote))), Itu akan memberi daftar singkat nama dari tiap tiap repositori yang kamu spesifikasikan

Jika kamu meng-clone repositorimu, kamu setidaknya akan melihat origin (asal repo) - yang diberikan git sebagai nama default pada server yang telah kamu clone.

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Kamu juga bisa menspesifikasikan `-v` yang menunjukkanmu URLs yang diberikan git unruk menyimpan nama yang digunakan untuk membaca dan menulis ke repositori terpisah tersebut :

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Jika kamu memiliki lebih dari satu repositori terpisah,perintah tersebut akan memberikan daftarnya. Contoh, sebuah repositori dengan banyak repositori terpisah untuk dikerjakan oleh beberapa kolabolator, mungkin akan terlihat seperti ini:

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Ini artinya kita bisa melakukan pull kontribusi dari user mana saja secara mudah. kita mungkin punya izin untuk mem-push ke satu atau beberapa dari repositori tersebut, walaupun kami tidak memberitahunya disini. 

Perhatikan bahwa repositori terpisah ini punya beberapa protocol, kami akan membahasnya lebih lanjut di <<_git_on_the_server>>.

==== Menambahkan Repositori Terpisah

Saya menyebutkan dan memberikan beberapa demo tentang menambahkan repositori terpisah di pembahasan sebelumnya, tetapi disini akan dijelaskan bagaimana melakukannya secara jelas.(((git commands, remote)))

Untuk menambahkan repositori terpisah baru secara singkat, kamu bisa menjalankan `git remote add [nama] [url]`

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Sekarang kamu bisa menggunakan string `pb` di command line sebagai pengganti seluruh URL. 

Contohnya, jika kamu ingin mengambil (fetch) semua informasi yang paul punya, tetapi ka,u belum mempunyainya di repositorimu, kamu bisa menjalankan `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

cabang master repositori paul sekarang sudah bisa diakses secara lokal sebagai `pb/master`, kamu bisa menggabungkannya ke salah satu dari cabang repositorimu, atau kamu bisa memeriksa cabang repositorimu jika kamu ingin memeriksanya.


(Kita akan membahas cabang repositori(branch) dan bagaimana menggunakannya lebih detail di <<_git_branching>>.)


[[_fetching_and_pulling]]
==== Mengambil dan Menarik Data dari Repositori Terpisah

Seperti yang telah kamu lihat, untuk mengambil data dari repositori terpisah, kamu bisa menjalankan perintah:(((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

Perintah akan pergi ke repositori terpisah itu dan mengambil semua data yang belum kamu punya.

Setelah kamu melakukannya, kamu akan mempunyai referensi kepada semua cabang dari repositori terpisah, yang bisa kamu gabungkan atau kamu periksa kapan saja.

Jika kamu meng-clone sebuah repositori, perintah secara otomatis akan menambahkan repositori terpisah dibawah nama ``origin``.

Jadi, `git fetch origin` mengambil setiap pekerjaan baru yang di-push ke server tersebut sejak kamu clone(atau sejak pengambilan (fetch) terakhir),


Sangat penting untuk mencatat bahwa perintah `git fetch` akan mengambil data ke repositori lokalmu - tetapi ia tidak otomatis tergabung dengan pekerjaanmu atau perubahan apapun yang kamu lakukan .

Kamu harus menggabungkannya secara manual ketika pekerjaanmu sudah siap.

Jika kamu mempunyai cabang yang digunakan untuk memantau sebuah repositori terpisah (lihat sesi selanjutnya dan <<_git_branching>> untuk informasi lebih lanjut), kamu bisa menggunakan perintah `git pull` untuk otomatis mengambil dan menggabungkan sebuah repositori terpisah ke cabang repositorimu saat ini.(((git commands, pull)))

Ini mungkin saja menjadi cara yang lebih mudah atau lebih nyaman bagimu; dan secara default, perintah `git clone` akan otomatis menetapkan lokal repositorimu untuk memantau master repositori terpisahmu (atau apapun nama default repositori tersebut) pada server yang kamu clone.

menjalankan `git pull` umumnya akan mengambil data dari server yang kamu clone dan secara otomatis mencoba menggabungkannya dengan kode yang sedang kamu kerjakan.

[[_pushing_remotes]]
==== Mem-push ke repositori terpisah

Ketika kamu punya projek yang ingin kamu bagikan, kamu harus mem-push nya secara ke atas (upstream). Perintahnya cukup mudah : `git push [remote-name] [branch-name]`.(((git commands, push)))

Jika kamu ingin mem-push cabang branch ke server `origin` (lagi, meng-clone umumnya akan menetapkan kedua nama tersebut untukmu secara otomatis), lalu kamu bisa menjalankannya untuk mem-push commit yang telah kamu selesaikan di server :

[source,console]
----
$ git push origin master
----

Perintah ini hanya bekerja jika kamu meng-clone dari server yang dimana kamu punya akses menulis dan belum ada yang mem-push hingga saat itu.

Jika kamu dan orang lain meng-clone pada saat yang sama dan mereka mem-push ke atas(upstream) dan kamu juga mem-push ke atas(upstream), maka push kamu akan ditolak.

Kamu harus mem-pull pekerjaan mereka terlebih dahulu dan menggabungkannya di repositorimu sebelum kamu diperbolehkan untuk melakukan push.

Lihat <<_git_branching>> untuk informasi detail lebih lanjut tentang bagaimana mem-push ke server repositori terpisah.

[[_inspecting_remote]]
==== Memeriksa Repositori Terpisah

Jika kamu ingin informasi lebih lanjut tentang sebuah repositori tertentu, kamu bisa menggunakan perintah `git remote show [remote-name]` (((git commands, remote)))

kalau kamu menggunakan perintah dengan singkatan tertentu seperti `origin`, maka kamu akan mendapatkan sesuatu yang seperti ini :

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Itu akan membuat daftar URL untuk repositori terpisah, begitu juga begitu juga dengan pantauan informasi branch.

Perintah ini membantu memberi tahumu bahwa jika kamu sedang berada di cabang master dan menjalankan `git pull`, itu akan secara otomatis merge (menggabungkannya) di cabang master di repositori terpisah setelah di fetch semua referensi repositorinya.

Itu juga akan membuat daftar semua referensi repositori yang telah di pull.

Ini adalah contoh sederhana yang mungkin akan kamu hadapi, ketika kamu menggunakan Git lebih banyak lagi, bagaimanapun, kamu mungkin melihat lebih banyak informasi dari `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Perintah ini menunjukkan cabang mana yang otomatis akan di push ketika kamu menjalankan perintah `git push` ketika berada dalam cabang tertentu.

Itu juga menunjukkanmu cabang repositori terpisah mana yang berada di servermu yang belum kamu punya, repositori terpisah mana yang telah kamu hapus dari server, dan beberapa cabang yang otomatis merge (tergabung) ketika kamu menjalankan `git pull`

It also shows you which remote branches on the server you don't yet have, which remote branches you have that have been removed from the server, and multiple branches that are automatically merged when you run `git pull`.

==== Menghapus dan Mengubah Nama Repositori Terpisah

Kalau kamu ingin mengubah referensi nama, kamu bisa menjalankan `git remote rename` untuk mengubah nama dari repositori terpisah.(((git commands, remote)))

Contohnya, Jika kamu ingin mengubak nama `pb` ke `paul`, kamu bisa menggunakan `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Sangat baik untuk menyertakan bahwa ini mengubah nama cabang repositori terpisahmu juga.

Apa yang dahulunya direferensikan sebagai `pb/master` sekarang menjadi `paul/master`.

Jika kamu ingin menghapus repositori terpisahmu untuk beberapa alasan - kamu bisa memindahkan server atau tidak lagi menggunakan `mirror` tertentu, atau mungkin seorang kontributor tidak berkontribusi lagi - kamu bisa menggunakan perintah `git remote rm`:

[source,console]
----
$ git remote rm paul
$ git remote
origin
----
