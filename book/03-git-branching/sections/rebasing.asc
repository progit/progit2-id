[[_rebasing]]
=== Rebasing

(((rebasing)))
Pada Git, ada dua cara utama untuk mengintegrasikan perubahan dari satu cabang ke cabang yang lain: `merge` dan `rebase`.
Pada bagian ini Anda akan belajar apa yang di maksud rebasing, bagaimana melakukannya, mengapa alat ini sangat menakjubkan, dan dalam kasus apa Anda tidak ingin menggunakannya.

==== Dasar Rebase

Jika Anda kembali pada contoh sebelumnya <<_basic_merging>>, Anda bisa melihat bahwa Anda telah menyimpang dari pekerjaan Anda dan melakukan commits pada dua cabang yang berbeda.

.Riwayat yang berbeda
image::images/basic-rebase-1.png[Simple divergent history.]

Cara termudah untuk mengintegrasikan pencabangan, seperti yang sudah kita bahas, adalah perintah `merge`.
ia akan melakukan penggabungan tiga arah diantara dua snapshot pencabangan terbaru (`C3` dan `C4`) dan nenek moyang yang paling baru dari keduanya (`C2`), membuat snapshot baru (dan commit).

.Bergabung untuk mengintegrasikan riwayat kerja yang menyimpang
image::images/basic-rebase-2.png[Merging to integrate diverged work history.]

Namun, ada cara lain: Anda dapat mengambil patch dari perubahan yang diperkenalkan di `C4` dan mengajukan permohonan kembali di atas `C3`.
Di Git, ini disebut dengan _rebasing_.
Dengan perintah `rebase`, anda dapat mengambil semua perubahan yang dilakukan pada satu cabang dan mengulanginya dengan cabang yang lain.(((git commands, rebase)))

Dalam contoh ini, Anda akan menjalankan yang berikut ini:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Ia akan bekerja dengan pergi ke nenek moyang bersama dari dua pencabangan (yang Anda jalani dan yang Anda rebasing), mendapatkan diff yang diperkenalkan oleh tiap-tiap cabang commit yang Anda gunakan, menyimpan file diff ke file sementara, mengatur ulang cabang saat ini dengan commit yang sama seperti cabang yang Anda rebasing, dan akhirnya menerapkan setiap perubahan secara bergantian.

.Rebasing perubahan diperkenalkan di `C4` ke `C3`
image::images/basic-rebase-3.png[Rebasing the change introduced in `C4` onto `C3`.]

Pada titik ini, Anda dapat kembali ke master cabang dan melakukan marge secara cepat ke depan.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Malaju cepat ke cabang induk
image::images/basic-rebase-4.png[Fast-forwarding the master branch.]

Sekarang, snapshot yang ditunjukkan oleh `C4'` sama persis dengan yang ditunjukkan oleh `C5` pada contoh marge.
Tidak ada perbedaan dalam produk akhir integrasi, tapi rebasing membuat riwayat lebih bersih.
Jika anda memeriksa log dari cabang yang di rebasing, itu terlihat seperti riwayat linier: dan terlihat semua pekerjaan itu terjadi secara seri, bahkan ketika itu awalnya terjadi secara paralel.

Seringkali, Anda akan melakukan ini untuk memastikan commit Anda diterapkan dengan bersih di cabang jarak jauh - mungkin dalam proyek yang ingin Anda kontribusikan namun tidak Anda pertahankan.
Dalam kasus ini, Anda akan melakukan pekerjaan Anda di cabang dan kemudian rebase pekerjaan Anda ke `origin/master` saat Anda siap mengirimkan patch Anda ke proyek utama.
Dengan begitu, pengelola tidak mesti harus melakukan pekerjaan integrasi - hanya dengan melaju cepat atau berlaku bersih.

Perhatikan bahwa snapshot yang ditunjukkan oleh commit akhir yang Anda lakukan, apakah itu yang terakhir dari rebase commit untuk rebase atau marge akhir yang dilakukan setelah marge, adalah sebuah snapshot yang sama - hanya riwayat yang berbeda.
Rebasing replay berubah dari satu baris kerja ke pekerjaan lain sesuai urutan yang mereka perkenalkan, sedangkan marge mengambil titik akhir dan melakukan marge untuk keduanya.

==== Rebase Lebih Menarik

Anda juga dapat mengulangi rebase Anda pada sesuatu selain cabang target rebase.
Ambil riwayat seperti <<rbdiag_e>>, misalnya.
Anda bercabang dengan cabang topik (`server`) untuk menambahkan beberapa fungsi sisi server ke proyek Anda, dan membuat commit.
Kemudian, Anda bercabang untuk mengubah sisi klien (`client`) dan lakukan commit beberapa kali.
Akhirnya, Anda kembali ke cabang server Anda dan melakukan beberapa commit lagi.

[[rbdiag_e]]
.Riwayat dengan cabang topik cabang topik lain
image::images/interesting-rebase-1.png[A history with a topic branch off another topic branch.]

Misalkan anda memutuskan ingin marge perubahan sisi klien ke jalur utama untuk di rilis, namun Anda ingin menunda perubahan sisi server sampai diuji lebih lanjut.
Anda bisa mengambil perubahan pada klien yang tidak berada di server (`C8` dan` C9`) dan mengulangi kembali pada cabang induk Anda dengan menggunakan opsi`--onto` dari `git rebase`:

[source,console]
----
$ git rebase --onto master server client
----

Ini pada dasarnya mengatakan, ``Periksa cabang klien, cari tahu patch dari nenek moyang umum cabang `client` and `server`, dan kemudian kirimkan kembali ke `master`.''
Agak sedikit rumit, tapi hasilnya lumayan bagus.

.Rebasing cabang topik dari cabang topik lain
image::images/interesting-rebase-2.png[Rebasing a topic branch off another topic branch.]

Sekarang Anda bisa melaju cepat ke cabang master Anda (see <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Melaju cepat ke cabang master Anda untuk melakukan perubahan cabang klien
image::images/interesting-rebase-3.png[Fast-forwarding your master branch to include the client branch changes.]

Katakanlah anda memutuskan untuk menarik cabang server Anda juga.
Anda dapat mengembalikan cabang server ke cabang utama tanpa harus memeriksanya terlebih dulu dengan menjalankan `git rebase [basebranch] [topicbranch]` â€“ yang memeriksa cabang topik (dalam kasus ini, `server`) untuk Anda dan mengulanginya ke cabang dasar (`master`):

[source,console]
----
$ git rebase master server
----

Ini akan memutar ulang kerja `server` Anda di atas pekerjaan `master` Anda, seperti yang ditunjukkan pada <<rbdiag_h>>.

[[rbdiag_h]]
.Rebasing cabang server Anda di atas cabang master Anda
image::images/interesting-rebase-4.png[Rebasing your server branch on top of your master branch.]

Kemudian, Anda bisa melaju cepat ke cabang dasar (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

Anda bisa menghapus cabang `client` dan `server` karena semua pekerjaan itu terintegrasi dan Anda tidak membutuhkannya lagi, meninggalkan riwayat Anda untuk seluruh proses ini terlihat seperti <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Riwayat commit terakhir
image::images/interesting-rebase-5.png[Final commit history.]

[[_rebase_peril]]
==== Bahaya Rebasing

(((rebasing, perils of)))
Ahh, tapi kebahagiaan rebasing bukan tanpa kekurangannya, yang bisa disimpulkan dalam satu baris saja:

**Do not rebase commits that exist outside your repository.**

Jika Anda mengikuti panduan itu, Anda akan baik-baik saja.
Jika tidak, orang akan membenci Anda, dan Anda akan dicemooh oleh teman dan keluarga.

Ketika Anda mengisi rebase, Anda meninggalkan commit yang ada dan membuat yang baru yang serupa namun berbeda.
Jika Anda mendorong commit di suatu tempat dan yang lainnya menarik mereka ke bawah dan mendasarkan pekerjaan pada mereka, dan kemudian Anda menulis ulang perintah yang dilakukan dengan `git rebase` dan dorong mereka lagi, kolaborator Anda harus marge kembali pekerjaan mereka dan semuanya akan berantakan saat Anda mencoba menarik pekerjaan mereka kembali ke pekerjaan Anda.

Mari kita lihat contoh bagaimana rebasing pekerjaan yang Anda buat di publik dapat menyebabkan masalah.
Misalkan Anda mengkloning dari server pusat dan kemudian melakukan beberapa pekerjaan dari itu.
Riwayat commit Anda akan terlihat seperti ini:

.Kloning repositori, dan beberapa pekerjaan dasar di atasnya
image::images/perils-of-rebasing-1.png[Clone a repository, and base some work on it.]

Sekarang, orang lain melakukan lebih banyak pekerjaan yang menyertakan marge, dan mendorong pekerjaan itu ke server pusat.
Anda menjemput mereka dan melakukan marge cabang jarak jauh yang baru ke dalam pekerjaan Anda, membuat riwayat Anda terlihat seperti ini:

.Ambil lebih banyak commit, dan marge ke dalam pekerjaan Anda
image::images/perils-of-rebasing-2.png[Fetch more commits, and merge them into your work.]

Selanjutnya, orang yang mendorong pekerjaan marge memutuskan untuk kembali dan mengembalikan pekerjaan mereka sebagai gantinya; mereka melakukan `git push --force` untuk menimpa riwayat di server.
Anda kemudian mengambil dari server itu, menurunkan commit baru.

[[_pre_merge_rebase_work]]
.Seseorang mendorong untuk melakukan rebase commit, meninggalkan commit yang telah Anda lakukan berdasarkan pekerjaan Anda
image::images/perils-of-rebasing-3.png[Someone pushes rebased commits, abandoning commits you've based your work on.]

Sekarang Anda berdua beraroma.
Jika Anda melakukan `git pull`, Anda akan membuat commit marge yang mencakup kedua baris riwayat, dan repositori Anda akan terlihat seperti ini:

[[_merge_rebase_work]]
.Anda marge dalam pekerjaan yang sama lagi menjadi marge commit baru
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit.]

Jika Anda menjalankan `git log` saat riwayat Anda terlihat seperti ini, Anda akan melihat dua commit yang mempunyai pengarang, tanggal, dan pesan yang sama, yang akan membingungkan orang.
Selanjutnya, jika Anda mendorong riwayat ini kembali ke server, Anda akan mengenalkan kembali semua kesalahan yang telah dilakukan ke server pusat, yang selanjutnya dapat membingungkan orang.
Ini cukup aman untuk diasumsikan bahwa pengembang lain tidak menginginkan `C4` dan `C6` berada dalam riwayat; Karena itulah dia mulai berada di tempat pertama.

[[_rebase_rebase]]
==== Rebase Saat Anda ingin Rebase

Jika Anda *melakukan* atau menemukan diri Anda dalam situasi seperti ini, Git memiliki sihir lebih lanjut yang bisa membantu Anda keluar pada situasi tersebut. Jika seseorang di tim Anda memaksa mendorong perubahan yang menimpa pekerjaan yang telah Anda kerjakan, tantangan Anda adalah mencari tahu apa yang menjadi milik Anda dan apa yang telah mereka tulis ulang.

Ternyata bahwa selain melakukan SHA checksum, Git juga menghitung checksum yang berbasis hanya pada patch yang diperkenalkan dengan commit. Ini disebut ``patch-id".

If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.

Misalnya, pada skenario sebelumnya, jika kiranya kita melakukan marge saat kita berada di <<_pre_merge_rebase_work>> kita menjalankan `git rebase teamone/master`, Git akan:

* Tentukan pekerjaan apa yang unik untuk cabang kita (C2, C3, C4, C6, C7)
* Tentukan yang tidak marge commit (C2, C3, C4)
* Tentukan yang belum ditulis ulang ke cabang target (hanya C2 dan C3, karena C4 adalah patch yang sama dengan C4 ')
* Terapkan yang commit ke atas `teamone/master`

So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase on top of force-pushed rebase work.
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]

Ini hanya akan berjalan jika C4 dan C4 'yang pasangan Anda buat hampir sama dengan patch yang sama. Jika tidak, rebase tidak akan dapat mengatakan bahwa itu duplikat dan akan menambahkan patch yang sama C4 lainnya (yang kemungkinan akan gagal diterapkan dengan bersih, karena perubahannya setidaknya akan ada di sana).

Anda juga dapat menyederhanakannya dengan menjalankan `git pull --rebase` dan bukan `git pull` normal. Atau Anda bisa melakukannya secara manual dengan `git fetch` diikuti oleh `git rebase teamone/master` dalam kasus ini.

Jika Anda menggunakan `git pull` dan ingin membuat `--rebase` default, Anda dapat mengatur nilai konfigurasi `pull.rebase` dengan sesuatu seperti `git config --global pull.rebase true`.

Jika Anda memperlakukan rebasing sebagai cara untuk membersihkan dan bekerja dengan commit sebelum Anda mendorong mereka, dan jika Anda hanya melakukan rebase commit yang tidak pernah tersedia untuk umum, maka Anda akan baik-baik saja.
Jika Anda melakukan rebase commit yang telah didorong ke depan umum, dan orang mungkin telah melakukan pekerjaan berdasarkan commit tersebut, maka Anda mungkin berada dalam beberapa masalah yang membuat Anda frustrasi, dan cemoohan rekan satu tim Anda.

Jika Anda atau rekan anda merasa perlu di beberapa titik, pastikan semua orang tahu cara untuk menjalankan `git pull --rebase` untuk mencoba membuat rasa sakit setelah terjadi sedikit lebih sederhana.

==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Sekarang setelah Anda melihat keutamaan rebasing dan marge dalam tindakan, Anda mungkin akan bertanya-tanya mana yang lebih baik.
Sebelum kita dapat menjawab ini, mari kita melangkah mundur sedikit dan membicarakan apa yang dimaksud riwayat.

Satu sudut pandang tentang ini adalah bahwa riwayat commit repositori Anda adalah *catatan tentang apa yang sebenarnya terjadi.*
Ini adalah dokumen riwayat, berharga menurut haknya sendiri, dan tidak boleh dirusak.
Dari sudut ini, mengubah riwayar commit hampir menghujat; Anda _lying_ tentang apa yang sebenarnya terjadi.
Lalu bagaimana jika ada rangkaian marge yang berantakan?
Begitulah yang terjadi, dan repositori harus melestarikannya untuk anak cucu.

Sudut pandang yang berlawanan adalah bahwa riwayat commit adalah *kisah tentang bagaimana proyek Anda dibuat.*
Anda tidak akan menerbitkan draf pertama buku, dan cara manual merawat perangkat lunak Anda perlu untuk diedit dengan saksama.
Ini adalah kamp yang menggunakan alat seperti rebase dan filter-branch untuk menceritakan kisah tersebut dengan cara yang terbaik untuk pembaca di masa depan.

Sekarang, pertanyaannya apakah marge atau rebasing lebih baik: mudah-mudahan Anda akan melihat bahwa itu tidak sesederhana itu.
Git adalah alat yang hebat, dan memungkinkan Anda melakukan banyak hal dan dengan riwayat Anda, namun setiap tim dan setiap proyek berbeda.
Sekarang setelah Anda tahu bagaimana kedua hal ini bekerja, terserah Anda untuk memutuskan mana yang terbaik untuk situasi khusus Anda.

Secara umum, cara untuk mendapatkan yang terbaik dari kedua dunia adalah dengan memperbaiki perubahan lokal yang telah Anda buat namun belum pernah Anda bagikan sebelum Anda mendorongnya untuk membersihkan riwayat Anda, namun tidak pernah mengembalikan apapun yang telah Anda ajukan ke suatu tempat.
